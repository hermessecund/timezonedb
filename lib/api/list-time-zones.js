"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../request");
const ENDPOINT = 'list-time-zone';
/**
 * Map passed request to API request
 */
const getApiRequest = (req) => {
    const { fields } = req || { fields: undefined };
    if (fields) {
        if (Array.isArray(fields)) {
            return Object.assign({}, req, { fields: fields.join(',') });
        }
        return Object.assign({}, req, { fields });
    }
    return req;
};
/**
 * List time zones
 *
 * See: https://timezonedb.com/references/list-time-zone
 */
exports.listTimeZones = (cfg, req) => __awaiter(this, void 0, void 0, function* () {
    const tzReq = getApiRequest(req);
    const response = yield request_1.tzdbRequest(cfg, {
        endpoint: ENDPOINT,
        req: tzReq,
    });
    return response.zones;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC10aW1lLXpvbmVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9saXN0LXRpbWUtem9uZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLHdDQUFzRDtBQUV0RCxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztBQTRGbEM7O0dBRUc7QUFDSCxNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQXlCLEVBQTJCLEVBQUU7SUFDM0UsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQztJQUVoRCxJQUFJLE1BQU0sRUFBRTtRQUNWLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6Qix5QkFBWSxHQUFHLElBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUc7U0FDN0M7UUFFRCx5QkFBWSxHQUFHLElBQUUsTUFBTSxJQUFHO0tBQzNCO0lBRUQsT0FBaUMsR0FBRyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDVSxRQUFBLGFBQWEsR0FBRyxDQUFPLEdBQWUsRUFBRSxHQUF5QixFQUF1QixFQUFFO0lBQ3JHLE1BQU0sS0FBSyxHQUE0QixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFMUQsTUFBTSxRQUFRLEdBQTBCLE1BQU0scUJBQVcsQ0FBd0IsR0FBRyxFQUFFO1FBQ3BGLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLEdBQUcsRUFBRSxLQUFLO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQ3hCLENBQUMsQ0FBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVFpEQkNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0emRiUmVxdWVzdCwgQXBpUmVzcG9uc2UgfSBmcm9tICcuLi9yZXF1ZXN0JztcblxuY29uc3QgRU5EUE9JTlQgPSAnbGlzdC10aW1lLXpvbmUnO1xuXG4vKipcbiAqIFJlcXVlc3QgZm9yIGEgbGlzdCBvZiB0aW1lIHpvbmVzXG4gKlxuICogU2VlOiBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvbGlzdC10aW1lLXpvbmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaXN0VGltZVpvbmVzUmVxdWVzdCB7XG4gIC8qKlxuICAgKiBDdXN0b21pemUgdGhlIGZpZWxkcyB0byBkaXNwbGF5IGluIHJlc3BvbnNlLiBVc2UgYW4gYXJyYXkgb2Ygc3RyaW5ncyBvciBhIGNvbW1hLXNlcGFyYXRlZCBzdHJpbmdcbiAgICpcbiAgICogT3B0aW9ucyBpbmNsdWRlOlxuICAgKlxuICAgKiBjb3VudHJ5Q29kZSwgY291bnRyeU5hbWUsIHpvbmVOYW1lLCBnbXRPZmZzZXQsIHRpbWVzdGFtcCwgYWxsIChkZWZhdWx0KVxuICAgKlxuICAgKiBTZWU6IGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9saXN0LXRpbWUtem9uZVxuICAgKi9cbiAgZmllbGRzPzogc3RyaW5nIHwgKGtleW9mIFRpbWVab25lKVtdO1xuXG4gIC8qKlxuICAgKiBBIHZhbGlkIElTTyAzMTY2IGNvdW50cnkgY29kZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9saXN0LXRpbWUtem9uZVxuICAgKi9cbiAgY291bnRyeT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgYSB0aW1lIHpvbmUuIFVzZSBhc3RlcmlzayAoKikgZm9yIHdpbGRjYXJkIHNlYXJjaFxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2xpc3QtdGltZS16b25lXG4gICAqL1xuICB6b25lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJlcXVlc3QgdGhhdCBnZXRzIHNlbnQgdG8gdGhlIEFQSSBmb3IgYSBsaXN0LXRpbWUtem9uZSByZXF1ZXN0XG4gKi9cbmludGVyZmFjZSBMaXN0VGltZVpvbmVzQXBpUmVxdWVzdCB7XG4gIGZpZWxkcz86IHN0cmluZztcbiAgY291bnRyeT86IHN0cmluZztcbiAgem9uZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaW1lIHpvbmUgaW5mb3JtYXRpb25cbiAqXG4gKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2xpc3QtdGltZS16b25lXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGltZVpvbmUge1xuICAvKipcbiAgICogQ291bnRyeSBjb2RlIG9mIHRoZSB0aW1lIHpvbmVcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9saXN0LXRpbWUtem9uZVxuICAgKi9cbiAgY291bnRyeUNvZGU6IHN0cmluZztcblxuICAvKipcbiAgICogQ291bnRyeSBuYW1lIG9mIHRoZSB0aW1lIHpvbmVcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9saXN0LXRpbWUtem9uZVxuICAgKi9cbiAgY291bnRyeU5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHRpbWUgem9uZSBuYW1lXG4gICAqXG4gICAqIFNlZSBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvbGlzdC10aW1lLXpvbmVcbiAgICovXG4gIHpvbmVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIG9mZnNldCBpbiBzZWNvbmRzIGJhc2VkIG9uIFVUQyB0aW1lXG4gICAqXG4gICAqIFNlZSBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvbGlzdC10aW1lLXpvbmVcbiAgICovXG4gIGdtdE9mZnNldDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IGxvY2FsIHRpbWUgaW4gVW5peCB0aW1lLiBTdWJ0cmFjdCBgZ210T2Zmc2V0YCB0byBnZXQgVVRDIHRpbWVcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9saXN0LXRpbWUtem9uZVxuICAgKi9cbiAgdGltZXN0YW1wOiBudW1iZXI7XG59XG5cbi8qKlxuICogUmVzcG9uc2UgZnJvbSB0aGUgQVBJIGZvciBhIGxpc3QtdGltZS16b25lIHJlcXVlc3RcbiAqL1xuaW50ZXJmYWNlIExpc3RUaW1lWm9uZXNSZXNwb25zZSBleHRlbmRzIEFwaVJlc3BvbnNlIHtcbiAgem9uZXM6IFRpbWVab25lW107XG59XG5cbi8qKlxuICogTWFwIHBhc3NlZCByZXF1ZXN0IHRvIEFQSSByZXF1ZXN0XG4gKi9cbmNvbnN0IGdldEFwaVJlcXVlc3QgPSAocmVxOiBMaXN0VGltZVpvbmVzUmVxdWVzdCk6IExpc3RUaW1lWm9uZXNBcGlSZXF1ZXN0ID0+IHtcbiAgY29uc3QgeyBmaWVsZHMgfSA9IHJlcSB8fCB7IGZpZWxkczogdW5kZWZpbmVkIH07XG5cbiAgaWYgKGZpZWxkcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZpZWxkcykpIHtcbiAgICAgIHJldHVybiB7IC4uLnJlcSwgZmllbGRzOiBmaWVsZHMuam9pbignLCcpIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgLi4ucmVxLCBmaWVsZHMgfTtcbiAgfVxuXG4gIHJldHVybiA8TGlzdFRpbWVab25lc0FwaVJlcXVlc3Q+IHJlcTtcbn07XG5cbi8qKlxuICogTGlzdCB0aW1lIHpvbmVzXG4gKlxuICogU2VlOiBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvbGlzdC10aW1lLXpvbmVcbiAqL1xuZXhwb3J0IGNvbnN0IGxpc3RUaW1lWm9uZXMgPSBhc3luYyAoY2ZnOiBUWkRCQ29uZmlnLCByZXE6IExpc3RUaW1lWm9uZXNSZXF1ZXN0KTogUHJvbWlzZTxUaW1lWm9uZVtdPiA9PiB7XG4gIGNvbnN0IHR6UmVxOiBMaXN0VGltZVpvbmVzQXBpUmVxdWVzdCA9IGdldEFwaVJlcXVlc3QocmVxKTtcblxuICBjb25zdCByZXNwb25zZTogTGlzdFRpbWVab25lc1Jlc3BvbnNlID0gYXdhaXQgdHpkYlJlcXVlc3Q8TGlzdFRpbWVab25lc1Jlc3BvbnNlPihjZmcsIHtcbiAgICBlbmRwb2ludDogRU5EUE9JTlQsXG4gICAgcmVxOiB0elJlcSxcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3BvbnNlLnpvbmVzO1xufTtcbiJdfQ==