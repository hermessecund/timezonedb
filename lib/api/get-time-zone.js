"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../request");
const ENDPOINT = 'get-time-zone';
/**
 * Map passed request to API request
 */
const getApiRequest = (req) => {
    const { fields } = req;
    if (fields) {
        if (Array.isArray(fields)) {
            return Object.assign({}, req, { fields: fields.join(',') });
        }
        return Object.assign({}, req, { fields });
    }
    return req;
};
/**
 * Convert API time zone detail to return time zone detail record
 */
const mapTimeZoneApiDetailToTimeZoneDetail = (apiDetail) => {
    const { countryCode, countryName, zoneName, abbreviation, gmtOffset, dst, zoneStart, zoneEnd, timestamp, formatted, totalPage, currentPage, } = apiDetail;
    return {
        countryCode,
        countryName,
        zoneName,
        abbreviation,
        gmtOffset,
        zoneStart,
        zoneEnd,
        timestamp,
        formatted,
        totalPage,
        currentPage,
        dst: !!(dst === 1),
    };
};
/**
 * Get time zone detail by zone name
 *
 * See: https://timezonedb.com/references/get-time-zone
 */
exports.getTimeZoneByZone = (cfg, req) => __awaiter(this, void 0, void 0, function* () {
    const tzReq = getApiRequest(Object.assign({}, req, { by: 'zone' }));
    const response = yield request_1.tzdbRequest(cfg, {
        endpoint: ENDPOINT,
        req: tzReq,
    });
    return mapTimeZoneApiDetailToTimeZoneDetail(response);
});
/**
 * Get time zone detail by geo position
 *
 * See: https://timezonedb.com/references/get-time-zone
 */
exports.getTimeZoneByPosition = (cfg, req) => __awaiter(this, void 0, void 0, function* () {
    const tzReq = getApiRequest(Object.assign({}, req, { by: 'position' }));
    const response = yield request_1.tzdbRequest(cfg, {
        endpoint: ENDPOINT,
        req: tzReq,
    });
    return mapTimeZoneApiDetailToTimeZoneDetail(response);
});
/**
 * Get time zone detail by city (premium).
 *
 * NOTE: The return value of this HAS NOT BEEN VERIFIED and this could be completely broken.
 *
 * See: https://timezonedb.com/references/get-time-zone
 */
exports.getTimeZoneByCity = (cfg, req) => __awaiter(this, void 0, void 0, function* () {
    const tzReq = getApiRequest(Object.assign({}, req, { by: 'city' }));
    const response = yield request_1.tzdbRequest(cfg, {
        endpoint: ENDPOINT,
        req: tzReq,
    });
    return response.zones.map(mapTimeZoneApiDetailToTimeZoneDetail);
});
/**
 * Get time zone detail by IP (premium).
 *
 * NOTE: The return value of this HAS NOT BEEN VERIFIED and this could be completely broken.
 *
 * See: https://timezonedb.com/references/get-time-zone
 */
exports.getTimeZoneByIP = (cfg, req) => __awaiter(this, void 0, void 0, function* () {
    const tzReq = getApiRequest(Object.assign({}, req, { by: 'ip' }));
    const response = yield request_1.tzdbRequest(cfg, {
        endpoint: ENDPOINT,
        req: tzReq,
    });
    return mapTimeZoneApiDetailToTimeZoneDetail(response);
});
//# sourceMappingURL=data:application/json;base64,