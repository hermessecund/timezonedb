"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../request");
const ENDPOINT = 'convert-time-zone';
/**
 * Convert API conversion detail to return detail record
 */
const mapConvertTimeZoneResponseToTimeZoneConversion = (resp) => {
    const { fromZoneName, fromAbbreviation, fromTimestamp, toZoneName, toAbbreviation, toTimestamp, offset, toFormatted, } = resp;
    return {
        fromZoneName,
        fromAbbreviation,
        fromTimestamp,
        toZoneName,
        toAbbreviation,
        toTimestamp,
        offset,
        toFormatted,
    };
};
/**
 * Map passed request to API request
 */
const getApiRequest = (req) => {
    const { fields } = req;
    if (fields) {
        if (Array.isArray(fields)) {
            return Object.assign({}, req, { fields: fields.join(',') });
        }
        return Object.assign({}, req, { fields });
    }
    return req;
};
/**
 * Convert from one time zone to another
 *
 * See: https://timezonedb.com/references/convert-time-zone
 */
exports.convertTimeZone = (cfg, req) => __awaiter(this, void 0, void 0, function* () {
    const tzReq = getApiRequest(req);
    const response = yield request_1.tzdbRequest(cfg, {
        endpoint: ENDPOINT,
        req: tzReq,
    });
    return mapConvertTimeZoneResponseToTimeZoneConversion(response);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC10aW1lLXpvbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2NvbnZlcnQtdGltZS16b25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQSx3Q0FBc0Q7QUFFdEQsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUM7QUF1SHJDOztHQUVHO0FBQ0gsTUFBTSw4Q0FBOEMsR0FBRyxDQUFDLElBQTZCLEVBQXNCLEVBQUU7SUFDM0csTUFBTSxFQUNKLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLFVBQVUsRUFDVixjQUFjLEVBQ2QsV0FBVyxFQUNYLE1BQU0sRUFDTixXQUFXLEdBQ1osR0FBRyxJQUFJLENBQUM7SUFFVCxPQUFPO1FBQ0wsWUFBWTtRQUNaLGdCQUFnQjtRQUNoQixhQUFhO1FBQ2IsVUFBVTtRQUNWLGNBQWM7UUFDZCxXQUFXO1FBQ1gsTUFBTTtRQUNOLFdBQVc7S0FDWixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQTJCLEVBQTZCLEVBQUU7SUFDL0UsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQztJQUV2QixJQUFJLE1BQU0sRUFBRTtRQUNWLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6Qix5QkFBWSxHQUFHLElBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUc7U0FDN0M7UUFFRCx5QkFBWSxHQUFHLElBQUUsTUFBTSxJQUFHO0tBQzNCO0lBRUQsT0FBbUMsR0FBRyxDQUFDO0FBQ3pDLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDVSxRQUFBLGVBQWUsR0FBRyxDQUFPLEdBQWUsRUFBRSxHQUEyQixFQUErQixFQUFFO0lBQ2pILE1BQU0sS0FBSyxHQUE4QixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFNUQsTUFBTSxRQUFRLEdBQTRCLE1BQU0scUJBQVcsQ0FBMEIsR0FBRyxFQUFFO1FBQ3hGLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLEdBQUcsRUFBRSxLQUFLO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsT0FBTyw4Q0FBOEMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRaREJDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdHpkYlJlcXVlc3QsIEFwaVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVxdWVzdCc7XG5cbmNvbnN0IEVORFBPSU5UID0gJ2NvbnZlcnQtdGltZS16b25lJztcblxuLyoqXG4gKiBSZXF1ZXN0IHRvIGNvbnZlcnQgYmV0d2VlbiB0aW1lIHpvbmVzXG4gKlxuICogU2VlIGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9jb252ZXJ0LXRpbWUtem9uZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnRUaW1lWm9uZVJlcXVlc3Qge1xuICAvKipcbiAgICogQ3VzdG9taXplIHRoZSBmaWVsZHMgdG8gZGlzcGxheSBpbiByZXNwb25zZS4gVXNlIGFuIGFycmF5IG9mIHN0cmluZ3Mgb3IgYSBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nXG4gICAqXG4gICAqIE9wdGlvbnMgaW5jbHVkZTpcbiAgICpcbiAgICogZnJvbVpvbmVOYW1lLCBmcm9tQWJicmV2aWF0aW9uLCBmcm9tVGltZXN0YW1wLCB0b1pvbmVOYW1lLCB0b0FiYnJldmlhdGlvbiwgdG9UaW1lc3RhbXAsIHRvRm9ybWF0dGVkLCBvZmZzZXRcbiAgICpcbiAgICogU2VlOiBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvY29udmVydC10aW1lLXpvbmVcbiAgICovXG4gIGZpZWxkcz86IHN0cmluZyB8IChrZXlvZiBUaW1lWm9uZUNvbnZlcnNpb24pW107XG5cbiAgLyoqXG4gICAqIEEgdmFsaWQgYWJicmV2aWF0aW9uIG9yIG5hbWUgb2YgdGltZSB6b25lIHRvIGNvbnZlcnQgZnJvbVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2NvbnZlcnQtdGltZS16b25lXG4gICAqL1xuICBmcm9tOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgdmFsaWQgYWJicmV2aWF0aW9uIG9yIG5hbWUgb2YgdGltZSB6b25lIHRvIGNvbnZlcnQgZnJvbVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2NvbnZlcnQtdGltZS16b25lXG4gICAqL1xuICB0bzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBVbml4IHRpbWUgaW4gVVRDIHRvIHJldHJpZXZlIHpvbmUgaW5mb3JtYXRpb24gZm9yICh1c2VkIGZvciBjYWxjdWxhdGluZyBvZmZzZXRzIGF0IGEgcGFydGljdWxhciB0aW1lKVxuICAgKlxuICAgKiBTZWU6IGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9nZXQtdGltZS16b25lXG4gICAqL1xuICB0aW1lPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIFJlcXVlc3QgdGhhdCBnZXRzIHNlbnQgdG8gdGhlIEFQSSBmb3IgYSBjb252ZXJ0LXRpbWUtem9uZSByZXF1ZXN0XG4gKi9cbmludGVyZmFjZSBDb252ZXJ0VGltZVpvbmVBcGlSZXF1ZXN0IHtcbiAgZmllbGRzPzogc3RyaW5nO1xuICBmcm9tOiBzdHJpbmc7XG4gIHRvOiBzdHJpbmc7XG4gIHRpbWU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogVGltZSB6b25lIGNvbnZlcnNpb24gaW5mb3JtYXRpb25cbiAqXG4gKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2NvbnZlcnQtdGltZS16b25lXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGltZVpvbmVDb252ZXJzaW9uIHtcbiAgLyoqXG4gICAqIFRoZSB0aW1lIHpvbmUgbmFtZSBvZiB0aGUgb3JpZ2luIGNpdHlcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9jb252ZXJ0LXRpbWUtem9uZVxuICAgKi9cbiAgZnJvbVpvbmVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRpbWUgem9uZSBhYmJyZXZpYXRpb24gb2YgdGhlIG9yaWdpbiBjaXR5XG4gICAqXG4gICAqIFNlZSBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvY29udmVydC10aW1lLXpvbmVcbiAgICovXG4gIGZyb21BYmJyZXZpYXRpb246IHN0cmluZztcblxuICAvKipcbiAgICogVGltZSBvZiB0aGUgb3JpZ2luIGNpdHkgaW4gdW5peCB0aW1lXG4gICAqXG4gICAqIFNlZSBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvY29udmVydC10aW1lLXpvbmVcbiAgICovXG4gIGZyb21UaW1lc3RhbXA6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHRpbWUgem9uZSBuYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiBjaXR5XG4gICAqXG4gICAqIFNlZSBodHRwczovL3RpbWV6b25lZGIuY29tL3JlZmVyZW5jZXMvY29udmVydC10aW1lLXpvbmVcbiAgICovXG4gIHRvWm9uZU5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGltZSB6b25lIGFiYnJldmlhdGlvbiBvZiB0aGUgZGVzdGluYXRpb24gY2l0eVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2NvbnZlcnQtdGltZS16b25lXG4gICAqL1xuICB0b0FiYnJldmlhdGlvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaW1lIG9mIHRoZSBkZXN0aW5hdGlvbiBjaXR5IGluIHVuaXggdGltZVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2NvbnZlcnQtdGltZS16b25lXG4gICAqL1xuICB0b1RpbWVzdGFtcDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEaWZmZXJlbmNlIGluIHNlY29uZHMgYmV0d2VlbiBvcmlnaW4gdGltZSB6b25lIGFuZCBkZXN0aW5hdGlvbiB0aW1lIHpvbmVcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vdGltZXpvbmVkYi5jb20vcmVmZXJlbmNlcy9jb252ZXJ0LXRpbWUtem9uZVxuICAgKi9cbiAgb2Zmc2V0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEZvcm1hdHRlZCB0aW1lc3RhbXAgaW4gYFktbS1kIGg6aTpzYCBmb3JtYXQgKGUuZy4gYDIwMTktMDMtMjkgMDM6NTY6MjdgKVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2NvbnZlcnQtdGltZS16b25lXG4gICAqL1xuICB0b0Zvcm1hdHRlZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXNwb25zZSBmcm9tIHRoZSBBUEkgZm9yIGEgY29udmVydC10aW1lLXpvbmUgcmVxdWVzdFxuICovXG50eXBlIENvbnZlcnRUaW1lWm9uZVJlc3BvbnNlID0gVGltZVpvbmVDb252ZXJzaW9uICYgQXBpUmVzcG9uc2U7XG5cbi8qKlxuICogQ29udmVydCBBUEkgY29udmVyc2lvbiBkZXRhaWwgdG8gcmV0dXJuIGRldGFpbCByZWNvcmRcbiAqL1xuY29uc3QgbWFwQ29udmVydFRpbWVab25lUmVzcG9uc2VUb1RpbWVab25lQ29udmVyc2lvbiA9IChyZXNwOiBDb252ZXJ0VGltZVpvbmVSZXNwb25zZSk6IFRpbWVab25lQ29udmVyc2lvbiA9PiB7XG4gIGNvbnN0IHtcbiAgICBmcm9tWm9uZU5hbWUsXG4gICAgZnJvbUFiYnJldmlhdGlvbixcbiAgICBmcm9tVGltZXN0YW1wLFxuICAgIHRvWm9uZU5hbWUsXG4gICAgdG9BYmJyZXZpYXRpb24sXG4gICAgdG9UaW1lc3RhbXAsXG4gICAgb2Zmc2V0LFxuICAgIHRvRm9ybWF0dGVkLFxuICB9ID0gcmVzcDtcblxuICByZXR1cm4ge1xuICAgIGZyb21ab25lTmFtZSxcbiAgICBmcm9tQWJicmV2aWF0aW9uLFxuICAgIGZyb21UaW1lc3RhbXAsXG4gICAgdG9ab25lTmFtZSxcbiAgICB0b0FiYnJldmlhdGlvbixcbiAgICB0b1RpbWVzdGFtcCxcbiAgICBvZmZzZXQsXG4gICAgdG9Gb3JtYXR0ZWQsXG4gIH07XG59O1xuXG4vKipcbiAqIE1hcCBwYXNzZWQgcmVxdWVzdCB0byBBUEkgcmVxdWVzdFxuICovXG5jb25zdCBnZXRBcGlSZXF1ZXN0ID0gKHJlcTogQ29udmVydFRpbWVab25lUmVxdWVzdCk6IENvbnZlcnRUaW1lWm9uZUFwaVJlcXVlc3QgPT4ge1xuICBjb25zdCB7IGZpZWxkcyB9ID0gcmVxO1xuXG4gIGlmIChmaWVsZHMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZHMpKSB7XG4gICAgICByZXR1cm4geyAuLi5yZXEsIGZpZWxkczogZmllbGRzLmpvaW4oJywnKSB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IC4uLnJlcSwgZmllbGRzIH07XG4gIH1cblxuICByZXR1cm4gPENvbnZlcnRUaW1lWm9uZUFwaVJlcXVlc3Q+IHJlcTtcbn07XG5cbi8qKlxuICogQ29udmVydCBmcm9tIG9uZSB0aW1lIHpvbmUgdG8gYW5vdGhlclxuICpcbiAqIFNlZTogaHR0cHM6Ly90aW1lem9uZWRiLmNvbS9yZWZlcmVuY2VzL2NvbnZlcnQtdGltZS16b25lXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0VGltZVpvbmUgPSBhc3luYyAoY2ZnOiBUWkRCQ29uZmlnLCByZXE6IENvbnZlcnRUaW1lWm9uZVJlcXVlc3QpOiBQcm9taXNlPFRpbWVab25lQ29udmVyc2lvbj4gPT4ge1xuICBjb25zdCB0elJlcTogQ29udmVydFRpbWVab25lQXBpUmVxdWVzdCA9IGdldEFwaVJlcXVlc3QocmVxKTtcblxuICBjb25zdCByZXNwb25zZTogQ29udmVydFRpbWVab25lUmVzcG9uc2UgPSBhd2FpdCB0emRiUmVxdWVzdDxDb252ZXJ0VGltZVpvbmVSZXNwb25zZT4oY2ZnLCB7XG4gICAgZW5kcG9pbnQ6IEVORFBPSU5ULFxuICAgIHJlcTogdHpSZXEsXG4gIH0pO1xuXG4gIHJldHVybiBtYXBDb252ZXJ0VGltZVpvbmVSZXNwb25zZVRvVGltZVpvbmVDb252ZXJzaW9uKHJlc3BvbnNlKTtcbn07XG4iXX0=